@startuml
'https://plantuml.com/class-diagram

package task-manager-client {
    package data{
        package model {
            class Task {
                - taskId : Integer
                - name : String
                - description : String
                - createdAt : Instant

                + Task()
                + Task(Integer taskId, String name , String description, Instant createAt)
                + getTaskId() : Integer
                + getName() : String
                + getDescription() : String
                + getCreationTime() : Instant
                + setTaskId(Integer taskId) : void
                + setName() : void
                + setDescription() : void
                + equals(Object obj) : boolean
                + hashCode() : int
            }
        }

    }

    package controller {
    }

    package view {
    }
}

'---------------------------------

package java.sql {

    class DriverManager {
      +registerDriver(driver: Driver): void
      +deregisterDriver(driver: Driver): void
      +getConnection(url: String, info: Properties): Connection
      +getConnection(url: String, user: String, password: String): Connection
      +getDriver(url: String): Driver
      +getDrivers(): Enumeration<Driver>
      +setLogWriter(out: PrintWriter): void
      +getLogWriter(): PrintWriter
      +setLoginTimeout(seconds: int): void
      +getLoginTimeout(): int
    }



    abstract class Statement {
      +execute(sql: String): boolean
      +executeQuery(sql: String): ResultSet
      +executeUpdate(sql: String): int
      +getConnection(): Connection
      +getFetchSize(): int
      +setFetchSize(fetchSize: int): void
      +getMaxRows(): int
      +setMaxRows(maxRows: int): void
      +getQueryTimeout(): int
      +setQueryTimeout(queryTimeout: int): void
      +close(): void
    }

    class ResultSet {
      +next(): boolean
      +getInt(columnIndex: int): int
      +getString(columnIndex: int): String
      +getBoolean(columnIndex: int): boolean
      +getDate(columnIndex: int): Date
      +getTime(columnIndex: int): Time
      +getTimestamp(columnIndex: int): Timestamp
      +getFloat(columnIndex: int): float
      +getDouble(columnIndex: int): double
      +getObject(columnIndex: int): Object
      +close(): void
    }

    class PreparedStatement {
        +setBoolean(parameterIndex: int, x: boolean): void
        +setByte(parameterIndex: int, x: byte): void
        +setShort(parameterIndex: int, x: short): void
        +setInt(parameterIndex: int, x: int): void
        +setLong(parameterIndex: int, x: long): void
        +setFloat(parameterIndex: int, x: float): void
        +setDouble(parameterIndex: int, x: double): void
        +setBigDecimal(parameterIndex: int, x: BigDecimal): void
        +setString(parameterIndex: int, x: String): void
        +setBytes(parameterIndex: int, x: byte[]): void
        +setDate(parameterIndex: int, x: Date): void
        +setTime(parameterIndex: int, x: Time): void
        +setTimestamp(parameterIndex: int, x: Timestamp): void
        +setNull(parameterIndex: int, sqlType: int): void
        '+setNull(parameterIndex: int, sqlType: int, typeName: String): void
        +setObject(parameterIndex: int, x: Object): void
        '+setObject(parameterIndex: int, x: Object, targetSqlType: int): void
        '+setObject(parameterIndex: int, x: Object, targetSqlType: int, scaleOrLength: int): void
        +setDate(parameterIndex: int, x: Date, cal: Calendar): void
        +setTime(parameterIndex: int, x: Time, cal: Calendar): void
        +setTimestamp(parameterIndex: int, x: Timestamp, cal: Calendar): void
        '+setAsciiStream(parameterIndex: int, x: InputStream, length: int): void
        '+setBinaryStream(parameterIndex: int, x: InputStream, length: int): void
        '+setCharacterStream(parameterIndex: int, reader: Reader, length: int): void
        '+setObject(parameterIndex: int, x: Object, targetSqlType: SQLType): void
        '+setObject(parameterIndex: int, x: Object, targetSqlType: SQLType, scaleOrLength: Int): void
        '+setNull(parameterIndex: Int, sqlType: SQLType?): Unit
        '+setNClob(parameterIndex: Int, value: NClob?): Unit
        '+setClob(parameterIndex: Int, reader: Reader?, length: Long): Unit
        '+setBlob(parameterIndex: Int, inputStream: InputStream?, length: Long): Unit
        '+setNClob(parameterIndex: Int, reader: Reader?, length: Long): Unit
        '+setSQLXML(parameterIndex: Int, xmlObject: SQLXML?): Unit
        '+setArray(parameterIndex: Int, array: java.sql.Array?): Unit
        '+setRowId(parameterIndex: Int, rowId: RowId?): Unit
        '+setRef(parameterIndex: Int, ref: Ref?): Unit
    }

    class Connection {
      +createStatement(): Statement
      +prepareStatement(sql: String): PreparedStatement
      '+prepareStatement(sql: String, resultSetType: int, resultSetConcurrency: int): PreparedStatement
      '+prepareStatement(sql: String, resultSetType: int, resultSetConcurrency: int, resultSetHoldability: int): PreparedStatement
      +prepareCall(sql: String): CallableStatement
      '+prepareCall(sql: String, resultSetType: int, resultSetConcurrency: int): CallableStatement
      '+prepareCall(sql: String, resultSetType: int, resultSetConcurrency: int, resultSetHoldability: int): CallableStatement
      +nativeSQL(sql: String): String
      +setAutoCommit(autoCommit: boolean): void
      +getAutoCommit(): boolean
      +commit(): void
      +rollback(): void
      +close(): void
      +isClosed(): boolean
      +getMetaData(): DatabaseMetaData
      +getCatalog(): String
      +setCatalog(catalog: String): void
      +getTransactionIsolation(): int
      +setTransactionIsolation(level: int): void
      +getTypeMap(): Map<String, Class<?>>
      +setTypeMap(map: Map<String, Class<?>>): void
      +getHoldability(): int
      +setHoldability(holdability: int): void
    }



    DriverManager ..> Connection : creates
    Connection ..> PreparedStatement : creates
    Connection ..> Statement : creates
    Statement <|-- PreparedStatement
    Statement ..> ResultSet : creates
}

hide java

@enduml