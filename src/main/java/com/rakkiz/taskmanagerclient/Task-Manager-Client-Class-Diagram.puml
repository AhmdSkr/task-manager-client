@startuml
'https://plantuml.com/class-diagram

package data {

    package model {
        class Task {
            + {static} NAME_LEN_MAX : int
            + {static} DESC_LEN_MAX : int
            + {static} DEFAULT_NAME : String
            + {static} DEFAULT_DESCRIPTION : String
            - taskId : Integer
            - name : String
            - description : String
            - createdAt : Instant
            + Task()
            + Task(taskId : Integer, name : String, name : String, description : String, createdAt : Instant)
            + getTaskId() : Integer
            + getName() : String
            + getDescription() : String
            + getCreationTime() : Instant
            + setTaskId(taskId : Integer)
            + setName(name : String)
            + setDescription(description : String)
            + equals(Object) : boolean
            + hashCode() : int
        }
    }
    package util {
        class DerbyDatabaseConnector {
            + getConnection() : java.sql.Connection
        }
        class SchemaManager {
            + {static} TASK_TABLE : String
            + {static} TASK_UPDATE_TRIGGER : String
            + {static} TASK_ID : String
            + {static} TASK_NAME : String
            + {static} TASK_DESC : String
            + {static} TASK_SCHEDULE_FOR : String
            + {static} TASK_DURATION : String
            + {static} TASK_UPDATED_AT : String
            + {static} TASK_CREATED_AT : String

            - connection : java.sql.Connection

            + SchemaManager(connection : java.sql.Connection)

            + getCreationDefinition() : String[]
            + getDestructionDefinition() : String[]
            + isEstablished() : boolean
            + establishSchema()
            + drop()

        }

        interface Paginator<Type> {
            + isPageable(): boolean
            + hasNext(): boolean
            + hasPrevious(): boolean
            + setRecordsPerPage(recordsCount: int): void
            + getPageCount(): int
            + get(): List<RecordType>
            + toNext(): void
            + toPrevious(): void
            + toFirst(): void
            + toLast(): void
            + toPage(pageIndex: int): void
        }

    }

    interface TaskRepository {
        + create(Task)
        + getByTaskId(Integer) : Task
        + getAllTasks() : List<Task>
        + getByCreationInterval(start : Instant, durationAfter Integer) : List<Task>
        + update(Task)
        + delete(Task)
    }
    TaskRepository ..> Task : supplies

    class DerbyTaskRepository {
        + {static} UPDATE_FAILURE_EXCEPTION_MESSAGE : String
        + {static} NULL_ID_EXCEPTION_MESSAGE : String
        - {static} instance : DerbyTaskRepository
        - {static} insertFormat : String
        - {static} readFormat : String
        - {static} updateFormat : String
        - {static} deleteFormat : String
        - connection : java.sql.Connection
        - insertStatement : java.sql.PreparedStatement
        - readAllStatement : java.sql.PreparedStatement
        - readByIdStatement : java.sql.PreparedStatement
        - readByCreationIntervalStatement : java.sql.PreparedStatement
        - updateStatement : java.sql.PreparedStatement
        - deleteStatement : java.sql.PreparedStatement
        - DerbyTaskRepository()
        + {static} getInstance() : DerbyTaskRepository
    }
    TaskRepository <|.. DerbyTaskRepository : realizes
    DerbyTaskRepository ..> SchemaManager : uses
    DerbyTaskRepository ..> DerbyDatabaseConnector : uses
}
package view {}
package controller {}
@enduml